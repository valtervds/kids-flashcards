rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Decks: published decks are world-readable; owner (anon user) can manage.
    match /decks/{deckId} {
      allow read: if resource.data.published == true || (request.auth != null && request.auth.uid == resource.data.ownerId);
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }

    // Per-user progress docs (only owner)
    match /users/{userId}/progress/{deckId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Legacy bundle doc
    match /users/{userId}/flashcards/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Media de decks (referências a URLs de áudio/vídeo). Somente owner cria/atualiza/deleta.
    match /deckMedia/{mediaId} {
      allow read: if resource.data.deckId != null && exists(/databases/$(database)/documents/decks/$(resource.data.deckId)) && get(/databases/$(database)/documents/decks/$(resource.data.deckId)).data.published == true
        || (request.auth != null && request.auth.uid == resource.data.ownerId);
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }
  }
}
